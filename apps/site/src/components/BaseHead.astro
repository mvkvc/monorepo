---
import type { SiteMeta } from "@/data/siteMeta";
import { siteConfig } from "@/site-config";
// Loading after script to stop flashing of dark mode
import "../styles/global.css";

type Props = SiteMeta;

const { title, description, ogImage, articleDate } = Astro.props;

const titleSeparator = "â€¢";
const siteTitle = `${title}`;
// const siteTitle = `${title} ${titleSeparator} ${siteConfig.title}`;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
// const socialImageURL = new URL(ogImage ? ogImage : "/social-card.png", Astro.url).href;
---

<script>
	const storedPreference = sessionStorage.getItem("darkMode");
	let darkModeEnabled;

	// if there's no stored preference or it is "true", default to dark mode
	if (storedPreference === null || storedPreference === "true") {
		darkModeEnabled = true;
	} else {
		darkModeEnabled = false;
	}

	// if the current page is not in the desired mode, switch it
	const currentMode = document.documentElement.classList.contains("dark");
	if (currentMode !== darkModeEnabled) {
		document.documentElement.classList.toggle("dark");
		sessionStorage.setItem("darkMode", darkModeEnabled ? "true" : "false");
	}
</script>
<!-- <link rel="stylesheet" href="/src/styles/global.css" /> -->
<script defer data-domain="mvk.vc" src="https://plausible.io/js/script.js"></script>

<!-- https://editor.p5js.org/mvkvc/sketches/Bwe2RORwm COLLATZ IMAGE HERE -->
<script async>
	const isDarkModeEnabled = () => document.documentElement.classList.contains("dark");

	const saveThemePreference = (isEnabled) => {
		sessionStorage.setItem("darkMode", isEnabled ? "true" : "false");
	};

	const loadThemePreference = () => {
		const storedPreference = sessionStorage.getItem("darkMode");
		if (storedPreference !== null) {
			return storedPreference === "true";
		} else {
			// Default value if there is no stored preference
			return false;
		}
	};

	const updatePublic = () => {
		const darkModeEnabled = isDarkModeEnabled();
		saveThemePreference(darkModeEnabled);

		var iconLinks = document.querySelectorAll('link[rel="icon"]');

		iconLinks.forEach((icon) => {
			if (icon.href.startsWith(window.location.origin + "/")) {
				let pathParts = icon.href.split("/");
				let basePathIndex = pathParts.indexOf(window.location.host) + 1;
				pathParts[basePathIndex] = darkModeEnabled ? "dark" : "light";
				icon.href = pathParts.join("/");
			}
		});

		// Rewrite link to background image url based on dark or light mode its collatz.png in either /dark or /light
		// TODO: fix
		const body = document.body;
		// const image = darkModeEnabled ? "/dark/collatz.png" : "/light/collatz.png";

		// const scaleFactor = 22 / 1128;
		const scaleFactor = 22 / 1200;
		const maxBackgroundSize = 30;
		// Checking window width
		// if (window.innerWidth > 900) {
		// 	body.style.backgroundImage = `url(${image})`;
		// 	body.style.backgroundPosition = "top left";
		// 	body.style.backgroundRepeat = "no-repeat";
		// 	body.style.backgroundSize = `${Math.min(window.innerWidth * scaleFactor, 100, maxBackgroundSize)}%`;
		// } else {
		// 	body.style.backgroundImage = "none";
		// }
	};

	window.addEventListener("resize", updatePublic);

	document.addEventListener("DOMContentLoaded", () => {
		// const darkModeEnabled = loadThemePreference();
		// document.documentElement.classList.toggle("dark", darkModeEnabled);

		updatePublic();

		const observer = new MutationObserver(() => {
			updatePublic();
		});

		observer.observe(document.documentElement, { attributes: true });

		const themeToggleButton = document.querySelector("toggle-theme");
		if (themeToggleButton) {
			themeToggleButton.addEventListener("click", () => {
				// Toggle theme
				isDarkModeEnabled() ? saveThemePreference(true) : saveThemePreference(false);
			});
		}
	});
</script>

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />

<!-- Icons / Favicon -->
<link rel="icon" type="image/x-icon" href="/dark/favicon.ico" sizes="any" />
<link rel="apple-touch-icon" href="/dark/apple-touch-icon.png" />
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{siteTitle}</title>
<meta name="title" content={siteTitle} />
<meta name="description" content={description} />
<meta name="author" content={siteConfig.author} />

<!-- Theme Colour -->
<meta name="theme-color" content={siteConfig.themeColorLight} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={articleDate ? "article" : "website"} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:site_name" content={siteConfig.title} />
<meta property="og:locale" content={siteConfig.ogLocale} />
<!-- <meta property="og:image" content={socialImageURL} /> -->
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
{
	articleDate && (
		<>
			<meta property="article:author" content={siteConfig.author} />
			<meta property="article:published_time" content={articleDate} />
		</>
	)
}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<!-- <meta property="twitter:image" content={socialImageURL} /> -->

<!-- RSS auto-discovery -->
<link rel="alternate" type="application/rss+xml" title={siteConfig.title} href="/rss.xml" />
