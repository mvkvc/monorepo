# yelp

```elixir
Mix.install([
  {:bumblebee, "~> 0.3.0"},
  {:axon, "~> 0.5.1"},
  {:nx, "~> 0.5.1"},
  {:exla, "~> 0.5.1"},
  {:explorer, "~> 0.5.0"}
])
```

## Section

```elixir
Nx.default_backend(EXLA.Backend)
```

```elixir
id = "albert-base-v2"

{:ok, spec} =
  Bumblebee.load_spec({:hf, id},
    architecture: :for_sequence_classification
  )

spec = Bumblebee.configure(spec, num_labels: 5)

{:ok, model} = Bumblebee.load_model({:hf, id}, spec: spec)
{:ok, tokenizer} = Bumblebee.load_tokenizer({:hf, id})
```

```elixir
defmodule Yelp do
  def load(path, tokenizer, opts \\ []) do
    path
    |> Explorer.DataFrame.from_csv!(header: false)
    |> Explorer.DataFrame.rename(["label", "text"])
    |> stream()
    |> tokenize_and_batch(tokenizer, opts[:batch_size], opts[:sequence_length])
  end

  def stream(df) do
    xs = df["text"]
    ys = df["label"]

    xs
    |> Explorer.Series.to_enum()
    |> Stream.zip(Explorer.Series.to_enum(ys))
  end

  def tokenize_and_batch(stream, tokenizer, batch_size, sequence_length) do
    stream
    |> Stream.chunk_every(batch_size)
    |> Stream.map(fn batch ->
      {text, labels} = Enum.unzip(batch)
      tokenized = Bumblebee.apply_tokenizer(tokenizer, text, length: sequence_length)
      {tokenized, Nx.stack(labels)}
    end)
  end
end
```

```elixir
batch_size = 32
sequence_length = 64
path = "nbs/yelp_review_full_csv/"

train_data =
  Yelp.load(path <> "train.csv", tokenizer,
    batch_size: batch_size,
    sequence_length: sequence_length
  )

test_data =
  Yelp.load(path <> "test.csv", tokenizer,
    batch_size: batch_size,
    sequence_length: sequence_length
  )
```

```elixir
Enum.take(train_data, 1)
```

```elixir
train_data = Enum.take(train_data, 250)
test_data = Enum.take(test_data, 50)
```

```elixir
%{model: model, params: params} = model

model
```

```elixir
[{input, _}] = Enum.take(train_data, 1)
Axon.get_output_shape(model, input)
```

```elixir

```

```elixir
logits_model = Axon.nx(model, & &1.logits)
```

```elixir
loss =
  &Axon.Losses.categorical_cross_entropy(&1, &2,
    reduction: :mean,
    from_logits: true,
    sparse: true
  )

optimizer = Axon.Optimizers.adam(5.0e-5)

loop = Axon.Loop.trainer(logits_model, loss, optimizer, log: 1)
```

```elixir
accuracy = &Axon.Metrics.accuracy(&1, &2, from_logits: true, sparse: true)

loop = Axon.Loop.metric(loop, accuracy, "accuracy")
```

```elixir
loop = Axon.Loop.checkpoint(loop, event: :epoch_completed)
```

```elixir
trained_model_state =
  logits_model
  |> Axon.Loop.trainer(loss, optimizer, log: 1)
  |> Axon.Loop.metric(accuracy, "accuracy")
  |> Axon.Loop.checkpoint(event: :epoch_completed)
  |> Axon.Loop.run(train_data, params, epochs: 1, compiler: EXLA, strict?: false)
```

```elixir
logits_model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(accuracy, "accuracy")
|> Axon.Loop.run(test_data, trained_model_state, compiler: EXLA)
```
