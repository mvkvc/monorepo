# NOTE: This file is auto generated by OpenAPI Generator 7.1.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule IPFSPinningServiceAPI.Api.Pins do
  @moduledoc """
  API calls for all endpoints tagged `Pins`.
  """

  alias IPFSPinningServiceAPI.Connection
  import IPFSPinningServiceAPI.RequestBuilder

  @doc """
  Add pin object
  Add a new pin object for the current access token

  ### Parameters

  - `connection` (IPFSPinningServiceAPI.Connection): Connection to server
  - `pin` (Pin): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, IPFSPinningServiceAPI.Model.PinStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_pin(Tesla.Env.client, IPFSPinningServiceAPI.Model.Pin.t, keyword()) :: {:ok, IPFSPinningServiceAPI.Model.PinStatus.t} | {:ok, IPFSPinningServiceAPI.Model.Failure.t} | {:error, Tesla.Env.t}
  def add_pin(connection, pin, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/pins")
      |> add_param(:body, :body, pin)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, IPFSPinningServiceAPI.Model.PinStatus},
      {400, IPFSPinningServiceAPI.Model.Failure},
      {401, IPFSPinningServiceAPI.Model.Failure},
      {404, IPFSPinningServiceAPI.Model.Failure},
      {409, IPFSPinningServiceAPI.Model.Failure},
      {"4XX", IPFSPinningServiceAPI.Model.Failure},
      {"5XX", IPFSPinningServiceAPI.Model.Failure}
    ])
  end

  @doc """
  Remove pin object
  Remove a pin object

  ### Parameters

  - `connection` (IPFSPinningServiceAPI.Connection): Connection to server
  - `requestid` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_pin_by_request_id(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, IPFSPinningServiceAPI.Model.Failure.t} | {:error, Tesla.Env.t}
  def delete_pin_by_request_id(connection, requestid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/pins/#{requestid}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, false},
      {400, IPFSPinningServiceAPI.Model.Failure},
      {401, IPFSPinningServiceAPI.Model.Failure},
      {404, IPFSPinningServiceAPI.Model.Failure},
      {409, IPFSPinningServiceAPI.Model.Failure},
      {"4XX", IPFSPinningServiceAPI.Model.Failure},
      {"5XX", IPFSPinningServiceAPI.Model.Failure}
    ])
  end

  @doc """
  Get pin object
  Get a pin object and its status

  ### Parameters

  - `connection` (IPFSPinningServiceAPI.Connection): Connection to server
  - `requestid` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, IPFSPinningServiceAPI.Model.PinStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pin_by_request_id(Tesla.Env.client, String.t, keyword()) :: {:ok, IPFSPinningServiceAPI.Model.PinStatus.t} | {:ok, IPFSPinningServiceAPI.Model.Failure.t} | {:error, Tesla.Env.t}
  def get_pin_by_request_id(connection, requestid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/pins/#{requestid}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, IPFSPinningServiceAPI.Model.PinStatus},
      {400, IPFSPinningServiceAPI.Model.Failure},
      {401, IPFSPinningServiceAPI.Model.Failure},
      {404, IPFSPinningServiceAPI.Model.Failure},
      {409, IPFSPinningServiceAPI.Model.Failure},
      {"4XX", IPFSPinningServiceAPI.Model.Failure},
      {"5XX", IPFSPinningServiceAPI.Model.Failure}
    ])
  end

  @doc """
  List pin objects
  List all the pin objects, matching optional filters; when no filter is provided, only successful pins are returned

  ### Parameters

  - `connection` (IPFSPinningServiceAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:cid` ([String.t]): Return pin objects responsible for pinning the specified CID(s); be aware that using longer hash functions introduces further constraints on the number of CIDs that will fit under the limit of 2000 characters per URL  in browser contexts
    - `:name` (String.t): Return pin objects with specified name (by default a case-sensitive, exact match)
    - `:match` (TextMatchingStrategy): Customize the text matching strategy applied when the name filter is present; exact (the default) is a case-sensitive exact match, partial matches anywhere in the name, iexact and ipartial are case-insensitive versions of the exact and partial strategies
    - `:status` ([IPFSPinningServiceAPI.Model.Status.t]): Return pin objects for pins with the specified status (when missing, service should default to pinned only)
    - `:before` (DateTime.t): Return results created (queued) before provided timestamp
    - `:after` (DateTime.t): Return results created (queued) after provided timestamp
    - `:limit` (integer()): Max records to return
    - `:meta` (%{optional(String.t) => String.t}): Return pin objects that match specified metadata keys passed as a string representation of a JSON object; when implementing a client library, make sure the parameter is URL-encoded to ensure safe transport

  ### Returns

  - `{:ok, IPFSPinningServiceAPI.Model.PinResults.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pins(Tesla.Env.client, keyword()) :: {:ok, IPFSPinningServiceAPI.Model.PinResults.t} | {:ok, IPFSPinningServiceAPI.Model.Failure.t} | {:error, Tesla.Env.t}
  def get_pins(connection, opts \\ []) do
    optional_params = %{
      :cid => :query,
      :name => :query,
      :match => :query,
      :status => :query,
      :before => :query,
      :after => :query,
      :limit => :query,
      :meta => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/pins")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, IPFSPinningServiceAPI.Model.PinResults},
      {400, IPFSPinningServiceAPI.Model.Failure},
      {401, IPFSPinningServiceAPI.Model.Failure},
      {404, IPFSPinningServiceAPI.Model.Failure},
      {409, IPFSPinningServiceAPI.Model.Failure},
      {"4XX", IPFSPinningServiceAPI.Model.Failure},
      {"5XX", IPFSPinningServiceAPI.Model.Failure}
    ])
  end

  @doc """
  Replace pin object
  Replace an existing pin object (shortcut for executing remove and add operations in one step to avoid unnecessary garbage collection of blocks present in both recursive pins)

  ### Parameters

  - `connection` (IPFSPinningServiceAPI.Connection): Connection to server
  - `requestid` (String.t): 
  - `pin` (Pin): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, IPFSPinningServiceAPI.Model.PinStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec replace_pin_by_request_id(Tesla.Env.client, String.t, IPFSPinningServiceAPI.Model.Pin.t, keyword()) :: {:ok, IPFSPinningServiceAPI.Model.PinStatus.t} | {:ok, IPFSPinningServiceAPI.Model.Failure.t} | {:error, Tesla.Env.t}
  def replace_pin_by_request_id(connection, requestid, pin, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/pins/#{requestid}")
      |> add_param(:body, :body, pin)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, IPFSPinningServiceAPI.Model.PinStatus},
      {400, IPFSPinningServiceAPI.Model.Failure},
      {401, IPFSPinningServiceAPI.Model.Failure},
      {404, IPFSPinningServiceAPI.Model.Failure},
      {409, IPFSPinningServiceAPI.Model.Failure},
      {"4XX", IPFSPinningServiceAPI.Model.Failure},
      {"5XX", IPFSPinningServiceAPI.Model.Failure}
    ])
  end
end
