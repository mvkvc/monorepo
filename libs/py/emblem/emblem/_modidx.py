# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/emblem',
                'doc_host': 'https://mvkvc.github.io',
                'git_url': 'https://github.com/mvkvc/emblem',
                'lib_path': 'emblem'},
  'syms': { 'emblem.api': { 'emblem.api.BedrockModel': ('api.html#bedrockmodel', 'emblem/api.py'),
                            'emblem.api.BedrockModel.__init__': ('api.html#bedrockmodel.__init__', 'emblem/api.py'),
                            'emblem.api.BedrockModel._get_default_config': ('api.html#bedrockmodel._get_default_config', 'emblem/api.py'),
                            'emblem.api.BedrockModel.embed': ('api.html#bedrockmodel.embed', 'emblem/api.py'),
                            'emblem.api.BedrockModel.embeda': ('api.html#bedrockmodel.embeda', 'emblem/api.py'),
                            'emblem.api.CohereModel': ('api.html#coheremodel', 'emblem/api.py'),
                            'emblem.api.CohereModel.__init__': ('api.html#coheremodel.__init__', 'emblem/api.py'),
                            'emblem.api.CohereModel._get_default_config': ('api.html#coheremodel._get_default_config', 'emblem/api.py'),
                            'emblem.api.CohereModel.embed': ('api.html#coheremodel.embed', 'emblem/api.py'),
                            'emblem.api.CohereModel.embeda': ('api.html#coheremodel.embeda', 'emblem/api.py'),
                            'emblem.api.OpenAIModel': ('api.html#openaimodel', 'emblem/api.py'),
                            'emblem.api.OpenAIModel.__init__': ('api.html#openaimodel.__init__', 'emblem/api.py'),
                            'emblem.api.OpenAIModel._get_default_config': ('api.html#openaimodel._get_default_config', 'emblem/api.py'),
                            'emblem.api.OpenAIModel.embed': ('api.html#openaimodel.embed', 'emblem/api.py'),
                            'emblem.api.OpenAIModel.embeda': ('api.html#openaimodel.embeda', 'emblem/api.py'),
                            'emblem.api._fetch_and_extract': ('api.html#_fetch_and_extract', 'emblem/api.py')},
            'emblem.core': { 'emblem.core.EmbeddingConfig': ('core.html#embeddingconfig', 'emblem/core.py'),
                             'emblem.core.EmbeddingModel': ('core.html#embeddingmodel', 'emblem/core.py'),
                             'emblem.core.EmbeddingModel.__init__': ('core.html#embeddingmodel.__init__', 'emblem/core.py'),
                             'emblem.core.EmbeddingModel._get_default_config': ( 'core.html#embeddingmodel._get_default_config',
                                                                                 'emblem/core.py'),
                             'emblem.core.EmbeddingModel.embed': ('core.html#embeddingmodel.embed', 'emblem/core.py'),
                             'emblem.core.EmbeddingModel.embeda': ('core.html#embeddingmodel.embeda', 'emblem/core.py'),
                             'emblem.core.env_or_raise': ('core.html#env_or_raise', 'emblem/core.py'),
                             'emblem.core.merge_models': ('core.html#merge_models', 'emblem/core.py')},
            'emblem.data': { 'emblem.data.Chunks': ('data.html#chunks', 'emblem/data.py'),
                             'emblem.data.Chunks.__init__': ('data.html#chunks.__init__', 'emblem/data.py'),
                             'emblem.data.Chunks.from_csv': ('data.html#chunks.from_csv', 'emblem/data.py'),
                             'emblem.data.Chunks.from_doc': ('data.html#chunks.from_doc', 'emblem/data.py'),
                             'emblem.data.Chunks.to_beir': ('data.html#chunks.to_beir', 'emblem/data.py'),
                             'emblem.data.Chunks.to_csv': ('data.html#chunks.to_csv', 'emblem/data.py'),
                             'emblem.data.InvalidFileError': ('data.html#invalidfileerror', 'emblem/data.py'),
                             'emblem.data.InvalidFileError.__init__': ('data.html#invalidfileerror.__init__', 'emblem/data.py'),
                             'emblem.data._chunk': ('data.html#_chunk', 'emblem/data.py'),
                             'emblem.data._chunk_max_tokens': ('data.html#_chunk_max_tokens', 'emblem/data.py'),
                             'emblem.data._count_chunk': ('data.html#_count_chunk', 'emblem/data.py'),
                             'emblem.data._count_chunk_timer': ('data.html#_count_chunk_timer', 'emblem/data.py'),
                             'emblem.data._default_tokenizer': ('data.html#_default_tokenizer', 'emblem/data.py'),
                             'emblem.data.clean': ('data.html#clean', 'emblem/data.py'),
                             'emblem.data.extract': ('data.html#extract', 'emblem/data.py')},
            'emblem.eval': { 'emblem.eval.AnnoyIndex': ('eval.html#annoyindex', 'emblem/eval.py'),
                             'emblem.eval.AnnoyIndex._create_index': ('eval.html#annoyindex._create_index', 'emblem/eval.py'),
                             'emblem.eval.AnnoyIndex.load': ('eval.html#annoyindex.load', 'emblem/eval.py'),
                             'emblem.eval.AnnoyIndex.save': ('eval.html#annoyindex.save', 'emblem/eval.py'),
                             'emblem.eval.AnnoyIndex.search': ('eval.html#annoyindex.search', 'emblem/eval.py'),
                             'emblem.eval.Eval': ('eval.html#eval', 'emblem/eval.py'),
                             'emblem.eval.Eval.__init__': ('eval.html#eval.__init__', 'emblem/eval.py'),
                             'emblem.eval.Eval.plot': ('eval.html#eval.plot', 'emblem/eval.py'),
                             'emblem.eval.Eval.run': ('eval.html#eval.run', 'emblem/eval.py'),
                             'emblem.eval.Index': ('eval.html#index', 'emblem/eval.py'),
                             'emblem.eval.Index.__init__': ('eval.html#index.__init__', 'emblem/eval.py'),
                             'emblem.eval.Index._create_index': ('eval.html#index._create_index', 'emblem/eval.py'),
                             'emblem.eval.Index.load': ('eval.html#index.load', 'emblem/eval.py'),
                             'emblem.eval.Index.save': ('eval.html#index.save', 'emblem/eval.py'),
                             'emblem.eval.Index.search': ('eval.html#index.search', 'emblem/eval.py'),
                             'emblem.eval.Questions': ('eval.html#questions', 'emblem/eval.py'),
                             'emblem.eval.Questions.__init__': ('eval.html#questions.__init__', 'emblem/eval.py'),
                             'emblem.eval.Questions.generate': ('eval.html#questions.generate', 'emblem/eval.py'),
                             'emblem.eval.Questions.load': ('eval.html#questions.load', 'emblem/eval.py'),
                             'emblem.eval.Questions.save': ('eval.html#questions.save', 'emblem/eval.py'),
                             'emblem.eval.RAGEval': ('eval.html#rageval', 'emblem/eval.py'),
                             'emblem.eval.RAGEval.run': ('eval.html#rageval.run', 'emblem/eval.py')},
            'emblem.infer': { 'emblem.infer.ChunkInput': ('infer.html#chunkinput', 'emblem/infer.py'),
                              'emblem.infer.ChunkOutput': ('infer.html#chunkoutput', 'emblem/infer.py'),
                              'emblem.infer.ModelInput': ('infer.html#modelinput', 'emblem/infer.py'),
                              'emblem.infer.ModelOutput': ('infer.html#modeloutput', 'emblem/infer.py'),
                              'emblem.infer.server': ('infer.html#server', 'emblem/infer.py')},
            'emblem.llm': { 'emblem.llm.completion': ('llm.html#completion', 'emblem/llm.py'),
                            'emblem.llm.generate_question': ('llm.html#generate_question', 'emblem/llm.py'),
                            'emblem.llm.generate_question_prompt': ('llm.html#generate_question_prompt', 'emblem/llm.py')},
            'emblem.model': { 'emblem.model.EmbeddingConfig': ('core.html#embeddingconfig', 'emblem/model.py'),
                              'emblem.model.EmbeddingModel': ('core.html#embeddingmodel', 'emblem/model.py'),
                              'emblem.model.EmbeddingModel.__init__': ('core.html#embeddingmodel.__init__', 'emblem/model.py'),
                              'emblem.model.EmbeddingModel._get_default_config': ( 'core.html#embeddingmodel._get_default_config',
                                                                                   'emblem/model.py'),
                              'emblem.model.EmbeddingModel.embed': ('core.html#embeddingmodel.embed', 'emblem/model.py'),
                              'emblem.model.EmbeddingModel.embeda': ('core.html#embeddingmodel.embeda', 'emblem/model.py'),
                              'emblem.model.env_or_raise': ('core.html#env_or_raise', 'emblem/model.py'),
                              'emblem.model.merge_models': ('core.html#merge_models', 'emblem/model.py')},
            'emblem.os': {},
            'emblem.train': {}}}
