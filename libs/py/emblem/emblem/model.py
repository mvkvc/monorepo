# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['A', 'env_or_raise', 'merge_models', 'EmbeddingConfig', 'EmbeddingModel']

# %% ../nbs/00_core.ipynb 3
from abc import ABC
from abc import abstractmethod
from typing import TypeVar
import os

import numpy as np
import torch as tch
from pydantic import BaseModel

# %% ../nbs/00_core.ipynb 4
A = TypeVar("A", bound=np.ndarray | tch.Tensor)

# %% ../nbs/00_core.ipynb 5
def env_or_raise(key: str) -> str:
    var = os.getenv(key)

    if var is None:
        raise EnvironmentError(f"Missing environment variable: {key}")

    return var

# %% ../nbs/00_core.ipynb 6
def merge_models(modela: BaseModel, modelb: BaseModel) -> BaseModel:
    merged_data = {**modela.dict(), **modelb.dict()}
    return modelb.__class__(**merged_data)

# %% ../nbs/00_core.ipynb 7
class EmbeddingConfig(BaseModel):
    key: str
    name: str | None = None
    rate_period: int | None = None
    rate_calls: int | None = None
    rate_tokens: int | None = None

# %% ../nbs/00_core.ipynb 8
class EmbeddingModel(ABC):
    def __init__(self, config: EmbeddingConfig, **kwargs) -> None:
        default_config = self._get_default_config(**kwargs)
        self.config = merge_models(default_config, config)

    @abstractmethod
    def _get_default_config(**kwargs) -> EmbeddingConfig:
        ...

    @abstractmethod
    def embed(text: str) -> A:
        ...

    @abstractmethod
    async def embeda(text: str) -> A:
        ...
