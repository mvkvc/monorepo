# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_infer.ipynb.

# %% auto 0
__all__ = ['ChunkInput', 'ChunkOutput', 'ModelInput', 'ModelOutput', 'server']

# %% ../nbs/07_infer.ipynb 3
from typing import Union
from typing import Callable
from fastapi import FastAPI
from .core import EmbeddingModel
from .core import EmbeddingConfig
from pydantic import BaseModel

# %% ../nbs/07_infer.ipynb 4
class ChunkInput(BaseModel):
    path: str

# %% ../nbs/07_infer.ipynb 5
class ChunkOutput(BaseModel):
    path: str

# %% ../nbs/07_infer.ipynb 6
class ModelInput(BaseModel):
    text: str

# %% ../nbs/07_infer.ipynb 7
class ModelOutput(BaseModel):
    embedding: list[float]

# %% ../nbs/07_infer.ipynb 8
def server(models: dict[str, EmbeddingModel], chunkers: dict[str, Callable]) -> None:
    app = FastAPI()

    routes_list = ""
    for model_name in models.keys():
        routes_list += f"/model/{model_name} "

    for chunk_name in chunkers.keys():
        routes_list += f"/chunk/{chunk_name} "

    for model_name, model in models.items():

        @app.post(f"/model/{model_name}")
        async def get_model_prediction(model_input: ModelInput) -> ModelOutput:
            prediction = model.predict(model_input.text)
            return ModelOutput(prediction=prediction)

    for chunk_name, chunker in chunkers.items():

        @app.post(f"/chunk/{chunk_name}")
        async def chunk_document(chunk_input: ChunkInput) -> ChunkOutput:
            output_path = chunker(path=chunk_input.path)
            return ModelOutput(path=output_path)

    @app.get("/{route}")
    def catch_all(route: str):
        return {f"Invalid route /{route}, please call one of: {str.trim(routes_list)}"}

    routes = [{"path": route.path, "name": route.name} for route in app.routes]
    print("ROUTES: ", routes)
    uvicorn.run(app, host="0.0.0.0", port=8000)
